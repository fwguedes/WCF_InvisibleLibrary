//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Console_Desk.WCF_LibraryDesk {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/WCF_LibraryDeskService.Exception")]
    [System.SerializableAttribute()]
    public partial class BookNotFoundException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF_LibraryDesk.ILibraryDesk")]
    public interface ILibraryDesk {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryDesk/BorrowBook", ReplyAction="http://tempuri.org/ILibraryDesk/BorrowBookResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Console_Desk.WCF_LibraryDesk.BookNotFoundException), Action="http://tempuri.org/ILibraryDesk/BorrowBookBookNotFoundExceptionFault", Name="BookNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/WCF_LibraryDeskService.Exception")]
        bool BorrowBook(string code, string client, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryDesk/BorrowBook", ReplyAction="http://tempuri.org/ILibraryDesk/BorrowBookResponse")]
        System.Threading.Tasks.Task<bool> BorrowBookAsync(string code, string client, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryDesk/ReturnBook", ReplyAction="http://tempuri.org/ILibraryDesk/ReturnBookResponse")]
        bool ReturnBook(string code, string client, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryDesk/ReturnBook", ReplyAction="http://tempuri.org/ILibraryDesk/ReturnBookResponse")]
        System.Threading.Tasks.Task<bool> ReturnBookAsync(string code, string client, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryDesk/Authenticate", ReplyAction="http://tempuri.org/ILibraryDesk/AuthenticateResponse")]
        void Authenticate(string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryDesk/Authenticate", ReplyAction="http://tempuri.org/ILibraryDesk/AuthenticateResponse")]
        System.Threading.Tasks.Task AuthenticateAsync(string client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILibraryDeskChannel : Console_Desk.WCF_LibraryDesk.ILibraryDesk, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LibraryDeskClient : System.ServiceModel.ClientBase<Console_Desk.WCF_LibraryDesk.ILibraryDesk>, Console_Desk.WCF_LibraryDesk.ILibraryDesk {
        
        public LibraryDeskClient() {
        }
        
        public LibraryDeskClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LibraryDeskClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryDeskClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryDeskClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool BorrowBook(string code, string client, System.DateTime date) {
            return base.Channel.BorrowBook(code, client, date);
        }
        
        public System.Threading.Tasks.Task<bool> BorrowBookAsync(string code, string client, System.DateTime date) {
            return base.Channel.BorrowBookAsync(code, client, date);
        }
        
        public bool ReturnBook(string code, string client, System.DateTime date) {
            return base.Channel.ReturnBook(code, client, date);
        }
        
        public System.Threading.Tasks.Task<bool> ReturnBookAsync(string code, string client, System.DateTime date) {
            return base.Channel.ReturnBookAsync(code, client, date);
        }
        
        public void Authenticate(string client) {
            base.Channel.Authenticate(client);
        }
        
        public System.Threading.Tasks.Task AuthenticateAsync(string client) {
            return base.Channel.AuthenticateAsync(client);
        }
    }
}
